[DATASETS]
# The read files must be either gem-files, zipped gem-files, bed-files, or
# zipped bedfiles. The extensions must thus be either of: .map.gz, .gem.map.gz,
# Avoid spaces and punctuation marks (.) in the filenames to aviod problems...
# .bed, or .bed.gz.

carrie = /users/rg/projects/NGS/Projects/ENCODE/hg19main/GingerasCarrie

K562_Cytoplasm = %(carrie)s/001C/genome/LID8465_FC61LTAAAXX_5_1.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_5_2.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_6_1.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_6_2.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_7_1.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_7_2.gem.map.gz

K562_Nucleus = %(carrie)s/001N/genome/LID8556_FC62067AAXX_1_2.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_3_2.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_2_1.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_1_1.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_2_2.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_3_1.gem.map.gz

K562_Whole_Cell = %(carrie)s/001WC/genome/LID16627_FC61U30AAXX_2_2.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_1_2.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_3_1.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_3_2.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_2_1.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_1_1.gem.map.gz

# K562_Chromatin = %(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_1_1.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_1_2.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_2_1.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_2_2.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_3_1.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_3_2.gem.map.gz

# HeLa-S3_Cytoplasm = %(carrie)s/011C/genome/LID8469_FC61AHAAAXX_1_2.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_3_2.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_3_1.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_2_2.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_2_1.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_1_1.gem.map.gz

# HeLa-S3_Nucleus = %(carrie)s/011N/genome/LID8559_FC6207CAAXX_3_1.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_3_2.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_4_1.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_4_2.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_2_1.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_2_2.gem.map.gz

# HeLa-S3_Nucleus = %(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_4_1.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_4_2.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_5_1.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_5_2.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_6_1.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_6_2.gem.map.gz

# GM12878_Cytoplasm = %(carrie)s/003C/genome/LID8467_FC61DG2AAXX_4_1.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_5_1.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_3_1.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_3_2.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_4_2.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_5_2.gem.map.gz

# GM12878_Nucleus = %(carrie)s/003N/genome/LID8532_FC61B6KAAXX_3_2.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_3_1.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_1_1.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_2_1.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_2_2.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_1_2.gem.map.gz

# GM12878_Whole_Cell = %(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_1_2.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_2_2.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_2_1.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_3_1.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_1_1.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_3_2.gem.map.gz


[ANNOTATION]
# The annotation should be in the gencode format
# Example of commented out line
annotation = /users/rg/jskancke/phdproject/3UTR/gencode5/gencode5_annotation.gtf


[CHROMOSOME1]
# running the whole simulation only with chromosome 1.
# The first time this setting is used, the chromosome 1 entries from the
# annotation file above will be filtered out to a separate file.
# chr1 = true
chr1 = false


[MIN_3UTR_LENGTH]
# Set the minimum 3UTR length to grab from the annotation. Some annotated 3UTRs
# are very short - down to 1 nucleotide. The default setting is to select only
# 3UTRs longer than 250 nt. Setting should not be below 100 nt.
3utrlen = 200


[POLYA_READS]
# The program can improve the detection of 3UTR ends by using reads that fall
# across the junction between UTR and poly(A) tail, which are the poly(A)
# reads. This takes extra time but improves the detection considearably.
# Three settings: 
# true : the program will attempt to get poly(A) reads from the
# original gem-mapping. 
# false : the program will not use poly(A) reads. 
# /some/path : provide the path to a .bed file that contains the poly(A) reads. This
# would be the case if you wish to extract the poly(A) reads yourself, instead
# of using the default settings of the program.
#
polya = true
# polya = false
# polya = /path/to/bedfile/with/poly(A)/reads


[CPU_CORES]
# Set how many cores you wish to use. default uses system_max minus 1. For
# example, with two processors that have two cores each, default is 4-1 = 3.
max_cores = 6
# max_cores = 5
# max_cores = default


[RESTRICT_READS]
# Set RESTRICT_READS to the number of reads to grab from the datasets. This
# will make the script run faster. if 'false': grab all reads.
# restrict_reads = 10000
restrict_reads = false


[SUPPLIED_3UTR_BEDFILE]
# The path to a .bed-file that contains the 3UTRS you want to investigate.
# If 'false', a .bed file will be generated from the annotation above (the
# first time the setting is used; later the stored .bed-file will be used).
utr_bed_path = false
# utr_bed_path = /users/rg/pferreira/desktop/motifsapa/data/bedannotation/hg19/3utr_hg19.selectedcases.bed


[EXTEND]
# By how much should the annotated 3UTRs be extended (in the 3' direction...)?
# It is recommended to let the default setting stay
extend_by = 100


[HG_FASTA]
# Supply the path to a fasta file of the entire human genome, where each fasta
# entry is one chromosome (big 3G file). The genome version in the fasta file
# must be the same as all the genome versions in the other files.
hg_fasta = /users/rg/jskancke/phdproject/3UTR/hg19fasta/hg19.fa


[UTR_LENGTH_TUNING]
# WARNING: if you run the 
# If polyA is True, you can train the cumulative percentage by seeing at what
# cumulative percentage the polyA reads are found. The default value is the
# result of this tuning in the ENCODE cell-compartment dataset.
# 
# An extra output file, cumul.stat, will be generated.
# In column 1: distances from the given cumulative point (e.g 99.5%) to the
# closest polyA cluster
# In column 2: cumulative points of the closest polyA cluster
# In column 3: RPKM values of this utr
# In column 4: length of this utr
#
# From this information distributions and distances can be generated for tuning
# the 99.5% value.
tuning = true
# tuning = false


[BIGWIG]
# list the datasets you would like to make into bigWig. The reads that overlap
# the 3UTR and the polyA reads will be turned into bigWig files.
# Note that this process requires a lot of memory. More than 6 gigabytes
# recommended for normal usage (needed for sorting). If region under
# investigation is large, more is required.
# Note that if bigWig files are found, they will not be overwritten. Delete
# files you want to re-make.
bigwig = true
datasets = K562_Whole_Cell
save_dir = /users/rg/jskancke/public_html/bigWigs
url = http://genome.crg.es/~jskancke/bigWigs


[PLOTTING]
# List the datasets from which you wish plots to be generated
# These datasets must at a previous point have been analyzed.
# datasets = HeLa-S3_Cytoplasm:K562_Cytoplasm:K562_Nucleus
