[DATASETS]
# Provide paths to the RNA-seq read files. The files must be either gem-files,
# zipped gem-files, bed-files, or zipped bedfiles. The extensions must thus be
# either of: .map.gz, .gem.map.gz, .bed, or .bed.gz.
# Avoid spaces and punctuation marks (.) in the filenames to aviod problems.
#
# You can use directory-shortcuts. Multiple files for one dataset are separated
# by ':'. Example:
# mydir = /myfolder/myreads
# Dset1 = %(mydir)s/subdir1/gem_mapped_reads1.gem.map.gz:%(mydir)s/subdir1/gem_mapped_reads1.gem.map.gz:%(mydir)s/subdir2/other_gem_mapped_reads.gem.map.gz
#
# All the files in one dataset will be merged, and each dataset will have one
# output file. For example, if you have 2 technical replicates lane1.gem.map
# and lane2.gem.map (two lanes in the sequences), you could define three
# datsets:
#
# lane1_alone = %(mydir)s/lane1.gem.map
# lane2_alone = %(mydir)s/lane2.gem.map
# both_lanes = %(mydir)s/lane1.gem.map:%(mydir)s/lane2.gem.map
#
# This way you can examine the output of each lane individually and also their
# merger for more statistical power.
#
carrie = /users/rg/projects/NGS/Projects/ENCODE/hg19main/GingerasCarrie

#### POLYA MINUS CONTROLS
# K562_CytoplasmMinus = %(carrie)s/001CMinus/genome/LID18545_FC62JRWAAXX_6_1.gem.map.gz:%(carrie)s/001CMinus/genome/LID18545_FC62JRWAAXX_6_2.gem.map.gz:%(carrie)s/001CMinus/genome/LID18545_FC62JRWAAXX_7_1.gem.map.gz:%(carrie)s/001CMinus/genome/LID18545_FC62JRWAAXX_7_2.gem.map.gz:%(carrie)s/001CMinus/genome/LID18545_FC62JRWAAXX_8_1.gem.map.gz:%(carrie)s/001CMinus/genome/LID18545_FC62JRWAAXX_8_2.gem.map.gz

# K562_NucleusMinus = %(carrie)s/001NMinus/genome/LID9195_FC625PLAAXX_6_1.gem.map.gz:%(carrie)s/001NMinus/genome/LID9195_FC625PLAAXX_6_2.gem.map.gz:%(carrie)s/001NMinus/genome/LID9195_FC625PLAAXX_7_1.gem.map.gz:%(carrie)s/001NMinus/genome/LID9195_FC625PLAAXX_7_2.gem.map.gz:%(carrie)s/001NMinus/genome/LID9195_FC625PLAAXX_8_1.gem.map.gz:%(carrie)s/001NMinus/genome/LID9195_FC625PLAAXX_8_2.gem.map.gz

# K562_Whole_CellMinus = %(carrie)s/001WCMinus/genome/LID8659_FC61FGUAAXX_1_1.gem.map.gz:%(carrie)s/001WCMinus/genome/LID8659_FC61FGUAAXX_1_2.gem.map.gz:%(carrie)s/001WCMinus/genome/LID8659_FC61FKBAAXX_1_1.gem.map.gz:%(carrie)s/001WCMinus/genome/LID8659_FC61FKBAAXX_1_2.gem.map.gz:%(carrie)s/001WCMinus/genome/LID8659_FC61FM9AAXX_1_1.gem.map.gz:%(carrie)s/001WCMinus/genome/LID8659_FC61FM9AAXX_1_2.gem.map.gz
####

# K562_Whole_Cell = %(carrie)s/001WC/genome/LID16627_FC61U30AAXX_2_2.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_1_2.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_3_1.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_3_2.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_2_1.gem.map.gz:%(carrie)s/001WC/genome/LID16627_FC61U30AAXX_1_1.gem.map.gz

# K562_Cytoplasm = %(carrie)s/001C/genome/LID8465_FC61LTAAAXX_5_1.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_5_2.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_6_1.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_6_2.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_7_1.gem.map.gz:%(carrie)s/001C/genome/LID8465_FC61LTAAAXX_7_2.gem.map.gz

# K562_Nucleus = %(carrie)s/001N/genome/LID8556_FC62067AAXX_1_2.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_3_2.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_2_1.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_1_1.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_2_2.gem.map.gz:%(carrie)s/001N/genome/LID8556_FC62067AAXX_3_1.gem.map.gz

# K562_Nucleoplasm = %(carrie)s/025NPtotal/genome/LID9189_FC61WW5AAXX_5_1.gem.map.gz:%(carrie)s/025NPtotal/genome/LID9189_FC61WW5AAXX_5_2.gem.map.gz:%(carrie)s/025NPtotal/genome/LID9189_FC61WW5AAXX_6_1.gem.map.gz:%(carrie)s/025NPtotal/genome/LID9189_FC61WW5AAXX_6_2.gem.map.gz:%(carrie)s/025NPtotal/genome/LID9189_FC61WW5AAXX_7_1.gem.map.gz:%(carrie)s/025NPtotal/genome/LID9189_FC61WW5AAXX_7_2.gem.map.gz

# K562_Chromatin = %(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_1_1.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_1_2.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_2_1.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_2_2.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_3_1.gem.map.gz:%(carrie)s/025CH/genome/LID9185_FC61RV8AAXX_3_2.gem.map.gz

knplm2 = %(carrie)s/026NPtotal/genome
K562_Nucleoplasm2 = %(knplm2)s/LID9190_FC61WU1AAXX_1_1.gem.map.gz:%(knplm2)s/LID9190_FC61WU1AAXX_1_2.gem.map.gz:%(knplm2)s/LID9190_FC61WU1AAXX_2_1.gem.map.gz:%(knplm2)s/LID9190_FC61WU1AAXX_2_2.gem.map.gz:%(knplm2)s/LID9190_FC61WW5AAXX_8_1.gem.map.gz:%(knplm2)s/LID9190_FC61WW5AAXX_8_2.gem.map.gz

kch2 = %(carrie)s/026CH/genome
K562_Chromatin2 = %(kch2)s/LID9186_FC61RV8AAXX_4_1.gem.map.gz:%(kch2)s/LID9186_FC61RV8AAXX_4_2.gem.map.gz:%(kch2)s/LID9186_FC61RV8AAXX_5_1.gem.map.gz:%(kch2)s/LID9186_FC61RV8AAXX_5_2.gem.map.gz:%(kch2)s/LID9186_FC61RV8AAXX_6_1.gem.map.gz:%(kch2)s/LID9186_FC61RV8AAXX_6_2.gem.map.gz

# HeLa-S3_Cytoplasm = %(carrie)s/011C/genome/LID8469_FC61AHAAAXX_1_2.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_3_2.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_3_1.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_2_2.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_2_1.gem.map.gz:%(carrie)s/011C/genome/LID8469_FC61AHAAAXX_1_1.gem.map.gz

# HeLa-S3_Nucleus = %(carrie)s/011N/genome/LID8559_FC6207CAAXX_3_1.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_3_2.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_4_1.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_4_2.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_2_1.gem.map.gz:%(carrie)s/011N/genome/LID8559_FC6207CAAXX_2_2.gem.map.gz

# HeLa-S3_Whole_Cell = %(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_4_1.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_4_2.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_5_1.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_5_2.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_6_1.gem.map.gz:%(carrie)s/011WC/genome/LID16633_FC61U2UAAXX_6_2.gem.map.gz

# GM12878_Cytoplasm = %(carrie)s/003C/genome/LID8467_FC61DG2AAXX_4_1.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_5_1.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_3_1.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_3_2.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_4_2.gem.map.gz:%(carrie)s/003C/genome/LID8467_FC61DG2AAXX_5_2.gem.map.gz

# GM12878_Nucleus = %(carrie)s/003N/genome/LID8532_FC61B6KAAXX_3_2.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_3_1.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_1_1.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_2_1.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_2_2.gem.map.gz:%(carrie)s/003N/genome/LID8532_FC61B6KAAXX_1_2.gem.map.gz

# GM12878_Whole_Cell = %(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_1_2.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_2_2.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_2_1.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_3_1.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_1_1.gem.map.gz:%(carrie)s/003WC/genome/LID16629_FC61U2UAAXX_3_2.gem.map.gz


[ANNOTATION]
# The annotation should be in the gencode format.
# Put annotation_path = false if you don't want
# to use an annotation.
# Supported annotation formats: GENCODE, ENSEMBL
# annotation_path = false
annotation_path = /users/rg/jskancke/phdproject/3UTR/gencode5/gencode5_annotation.gtf
annotation_format = GENCODE
# annotation_format = ENSEMBL
# annotation_path = /users/rg/jskancke/phdproject/3UTR/Annotations/Mus_musculus.NCBIM37.62.gtf 

[CHROMOSOME1]
# only_chr1 = true:
# run the whole simulation only with chromosome 1. This is for making
# speed-runs of the program. The first time this setting is used, the
# chromosome 1 entries from the annotation file above will be filtered out to a
# separate file.
#
only_chr1 = false
# run with all chromosomes
# only_chr1 = true


[MIN_3UTR_LENGTH]
# When extracting 3UTRs from the annotation, ignore those smaller than this
# value. Setting should never be below 100 nt.
min3utrlen = 200


[POLYA_READS]
polya = true
# polya = false
# the program will attempt to get poly(A) reads from the gem-mapped-reads. Only
# use this option if your gem-mapped reads have not been trimmed.
#
# polya = false:
# the program will not use poly(A) reads
#
# polya = /some/path:
# the path to a .bed file that contains the poly(A) reads. Use this setting if
# you yourself have extracted poly(A) reads, trimmed them, and remapped them.
#
# If you set polya = true, supply the path to the gem-mapper index file
# NOTE: leve out the suffix of the index file!!
gem_mapper_index = /users/rg/atanzer/DATA/GEM_indices/Genomes/H.sapiens.genome.hg19.main


[CPU_CORES]
# Set how many cores you wish to use. default uses system_max minus 1. For
# example, with two processors that have two cores each, default is 4-1 = 3.
max_cores = 5
# max_cores = default


[RESTRICT_READS]
# Set RESTRICT_READS to the number of reads to grab from the datasets. This
# option is primarily for debugging purposes.
# restrict_reads = false:
# Use all the reads in the read-files
restrict_reads = false


[SUPPLIED_3UTR_BEDFILE]
# If you don't want to extract 3UTRs from the annotation, or if you wish in
# investigate some other genomic region than the 3UTR, you can supply a bedfile
# yourself.
utr_bed_path = false
# utr_bed_path = /users/rg/pferreira/desktop/motifsapa/data/bedannotation/hg19/3utr_hg19.selectedcases.bed


[EXTEND]
# The pipeline can extend the 3UTR beyond their annotated end. This is useful
# for discovering those 3UTRs that are longer than what is reported in the
# annotation.
# When investigating annotated 3UTRs, it is recommended to let the default
# setting (500) stay. If the genomic region is something else than 3'UTR,
# extendby can be set to 0.
extend_by = 500


[HG_FASTA]
# Supply the path to a fasta file (3G) of the entire human genome. Each entry in the
# fasta file should be one chromosome. The genome version in the fasta file
# must be the same as all the genome versions to which the RNA-seq reads were
# mapped.
hg_fasta = /users/rg/jskancke/phdproject/3UTR/hg19fasta/hg19.fa


[BIGWIG]
# The pipeline can turn the read-coverage (both ordinary reads and poly(A)
# reads) into bigWig files. These files can either be viewed on a local genome
# browser, or they can be placed in a directory from where the UCSC genome browser
# can access them. Specify below which datasets you would like to have bigWig
# files from, using
# datasets = Dset1:Deset2:Dest3...
# Alternatively, set 'bigwig = all' to make bigWig files from all
# the datsets defined in the [DATASETS] section.
#
# If you do not use 'bigwig = all', you must set 'bigwig = true', otherwise no
# files will be made.
#
# In 'save_dir' supply the directories where the bigwig files should be output,
# and in 'url' give the url for this directory (i.e, "as it appears to the internet").
#
# The process of making bigWig files may use a lot of memory. Watch with 'top'
# carefully if you have less than 4 GB RAM. Depending on the size of the
# genomic region under investigation much more could potentialyl be needed.
#
# Note that if bigWig files for the datsets are already found, they will not be
# overwritten. Thus if you want to remake the files because you changed
# something about the original read-files, you must delete the files.
#
bigwig = false
# bigwig = true
# datasets = HeLa-S3_Whole_Cell:HeLa-S3_Cytoplasm:HeLa-S3_Nucleus
datasets = K562_Cytoplasm:K562_Nucleus:K562_Whole_Cell
save_dir = /users/rg/jskancke/public_html/bigWigs
url = http://genome.crg.es/~jskancke/bigWigs

# K562_Cytoplasm_Minus:K562_Nucleus_Minus:K562_Whole_Cell_Minus

#############################################
# Below settings are for debugging-purposes #
#############################################

[UTR_LENGTH_TUNING]
# For debugging purposes. Prints an extra output file with some statistics.
# If polyA is True, you can train the cumulative percentage by seeing at what
# cumulative percentage the polyA reads are found. The default value is the
# result of this tuning in the ENCODE cell-compartment dataset.
# 
# An extra output file, cumul.stat, will be generated.
# In column 1: distances from the given cumulative point (e.g 99.5%) to the
# closest polyA cluster
# In column 2: cumulative points of the closest polyA cluster
# In column 3: RPKM values of this utr
# In column 4: length of this utr
#
# From this information distributions and distances can be generated for tuning
# the 99.5% value.
# tuning = true
tuning = false


[PLOTTING]
###############################################################
# This setting can be ignored. It is for developmental purposes.
# #############################################################
#
# List the datasets from which you wish plots to be generated
# These datasets must at a previous point have been analyzed.
# datasets = 
# datasets = K562_Cytoplasm:K562_Whole_Cell:K562_Nucleus:HeLa-S3_Cytoplasm:HeLa-S3_Whole_Cell:HeLa-S3_Nucleus:GM12878_Cytoplasm:GM12878_Whole_Cell:GM12878_Nucleus
# datasets = GM12878_Cytoplasm:GM12878_Whole_Cell:GM12878_Nucleus:K562_Cytoplasm:K562_Whole_Cell:K562_Nucleus
# datasets = GM12878_Cytoplasm:GM12878_Whole_Cell:GM12878_Nucleus
# datasets = K562_Cytoplasm:K562_Whole_Cell:K562_Nucleus:K562_Nucleoplasm:K562_Chromatin
# datasets = K562_CytoplasmMinus:K562_Whole_CellMinus:K562_NucleusMinus:K562_Cytoplasm:K562_Whole_Cell:K562_Nucleus:K562_Nucleoplasm:K562_Chromatin
# datasets = K562_Cytoplasm:K562_Nucleus:K562_Nucleoplasm:K562_Chromatin:K562_Whole_Cell
datasets = K562_Nucleus:K562_Nucleoplasm2:K562_Chromatin2:K562_Nucleoplasm:K562_Chromatin
