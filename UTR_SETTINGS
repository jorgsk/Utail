[DATASETS]
# Provide paths to the RNA-seq read files. The files must be either gem-files,
# zipped gem-files, bed-files, or zipped bedfiles. The extensions must thus be
# either of: .map.gz, .gem.map.gz, .bed, or .bed.gz.
# Avoid spaces and punctuation marks (.) in the filenames to aviod problems.
#
# You can use directory-shortcuts. Multiple files for one dataset are separated
# by ':'. Example:
# mydir = /myfolder/myreads
# Dset1 = %(mydir)s/subdir1/gem_mapped_reads1.gem.map.gz:%(mydir)s/subdir1/gem_mapped_reads1.gem.map.gz:%(mydir)s/subdir2/other_gem_mapped_reads.gem.map.gz
#
# All the files in one dataset will be merged, and each dataset will have one
# output file. For example, if you have 2 technical replicates lane1.gem.map
# and lane2.gem.map (two lanes in the sequences), you could define three
# datsets:
#
# lane1_alone = %(mydir)s/lane1.gem.map
# lane2_alone = %(mydir)s/lane2.gem.map
# both_lanes = %(mydir)s/lane1.gem.map:%(mydir)s/lane2.gem.map
#
# This way you can examine the output of each lane individually and also their
# merger for more statistical power.
#
readDir = /home/jorgsk/phdproject/3UTR/CarrieReads

Test = %(readDir)s/LID8469_FC61AHAAAXX_1_1.gem.map.gz

[ANNOTATION]
# Put annotation_path = false if you don't want to use an annotation.
# Supported annotation formats: GENCODE, ENSEMBL
# If you want a stranded analysis, use 'stranded = true'. Use this if you
# supply genomic regions where you know that the strands of the genomic regions
# are factual. Use 'stranded = false' if you're just investigting general
# 'exonic' regions for example. If you supply both regional bedfiles and an
# annotation, the bedfiles will take presedence.

# annotation_path = false
annotation_path = /home/jorgsk/phdproject/3UTR/annotations/gencode.v9.annotation_chr1.gtf
annotation_format = GENCODE
# annotation_format = ENSEMBL
#
annotated_polyA_files = /home/jorgsk/phdproject/3UTR/annotations/polyA/polyAdb_gencode_merged_proper.bed

[SUPPLIED_3UTR_BEDFILE]
# If you supply more than one bedfile, the pipeline will be run for
# each region successively. If you supply both regional bedfiles and an
# annotation, the bedfiles will take presedence.
# NOTE: the region in the bedfile must be less than 2gigbases. This is due to a
# limitation in Python's pickle module which is needed for multiprocessing.

utr_bed_path = false

# CUFFLINKS MODEL
# utr_bed_path =/users/rg/jskancke/phdproject/3UTR/CUFF_LINKS/cufflinks_exons.bed

# regdir = /users/rg/jskancke/phdproject/3UTR/the_project/genomic_regions_hg19
## NON STRANDED
# utr_bed_path = %(regdir)s/3UTR-exonic_non_stranded.bed:%(regdir)s/3UTR-intronic_non_stranded.bed:%(regdir)s/5UTR-exonic_non_stranded.bed:%(regdir)s/5UTR-intronic_non_stranded.bed:%(regdir)s/CDS-exonic_non_stranded.bed:%(regdir)s/CDS-intronic_non_stranded.bed:%(regdir)s/Intergenic_non_stranded.bed:%(regdir)s/Nocoding-exonic_non_stranded.bed:%(regdir)s/Noncoding-intronic_non_stranded.bed:%(regdir)s/anti-3UTR-exonic_non_stranded.bed:%(regdir)s/whole_genome.bed

##STRANDED
# utr_bed_path = %(regdir)s/3UTR-exonic_stranded.bed:%(regdir)s/3UTR-intronic_stranded.bed:%(regdir)s/5UTR-exonic_stranded.bed:%(regdir)s/5UTR-intronic_stranded.bed:%(regdir)s/CDS-exonic_stranded.bed:%(regdir)s/CDS-intronic_stranded.bed:%(regdir)s/Intergenic_stranded.bed:%(regdir)s/Nocoding-exonic_stranded.bed:%(regdir)s/Noncoding-intronic_stranded.bed:%(regdir)s/anti-3UTR-exonic_stranded.bed

# utr_bed_path = /users/rg/pferreira/desktop/motifsapa/data/bedannotation/hg19/3utr_hg19.selectedcases.bed


[RESTRICT_READS]
# Set RESTRICT_READS to the number of reads to grab from the datasets. This
# option is primarily for debugging purposes.
restrict_reads = false
# restrict_reads = 500000

[CHROMOSOME1]
# only_chr1 = true:
# run the whole simulation only with chromosome 1. This is for making
# speed-runs of the program. The first time this setting is used, the
# chromosome 1 entries from the annotation file above will be filtered out to a
# separate file.
#
only_chr1 = false
# run with all chromosomes
# only_chr1 = true

[MIN_3UTR_LENGTH]
# When extracting 3UTRs from the annotation, ignore those smaller than this
# value. Setting should never be below 100 nt.
min3utrlen = 200

[GET_LENGTH]
length = true
# length = false
# if you don't care about the length of the 3UTRs, but only want their poly(A)
# sites, set 'length = false'. If you do this, you must have polya = true,
# otherwise Utail will do very little indeed ...

[POLYA_READS]
# polya = true
polya = false
# the program will attempt to get poly(A) reads from the gem-mapped-reads. Only
# use this option if your gem-mapped reads have not been trimmed.
#
# polya = false:
# the program will not use poly(A) reads
#
# polya = /some/path:
# the path to a .bed file that contains the poly(A) reads. Use this setting if
# you yourself have extracted poly(A) reads, trimmed them, and remapped them.
#
# If you set polya = true, supply the path to the gem-mapper index file
#
# NOTE XXX: leve out the suffix of the index file!! XXX NOTE
#
# gem_mapper_index = /users/rg/atanzer/DATA/GEM_indices/Genomes/H.sapiens.genome.hg19.main
gem_mapper_index = /home/jorgsk/phdproject/3UTR/dependencies/gem_index/H.sapiens.genome.hg19.main
# gem_mapper_index = /home/jskancke/hg19/gem_index/H.sapiens.genome.hg19.main

[CPU_CORES]
# Set how many cores you wish to use. default uses system_max minus 1. For
# example, with two processors that have two cores each, default is 4-1 = 3.
max_cores = 2
# max_cores = default

[EXTEND]
# The pipeline can extend the 3UTR beyond their annotated end. This is useful
# for discovering those 3UTRs that are longer than what is reported in the
# annotation.
# When investigating annotated 3UTRs, it is recommended to let the default
# setting (500) stay. If the genomic region is something else than 3'UTR,
# extendby should be be set to 0.
extend_by = 20
# extend_by = 0

[HG_FASTA]
# Supply the path to a fasta file (3G) of the entire human genome. Each entry in the
# fasta file should be one chromosome. The genome version in the fasta file
# must be the same as all the genome versions to which the RNA-seq reads were
# mapped.
# hg_fasta = /users/rg/jskancke/phdproject/3UTR/hg19fasta/hg19.fa
hg_fasta = /home/jorgsk/phdproject/3UTR/dependencies/hg19.fa

[BIGWIG]
# The pipeline can turn the read-coverage (both ordinary reads and poly(A)
# reads) into bigWig files. These files can either be viewed on a local genome
# browser, or they can be placed in a directory from where the UCSC genome browser
# can access them. Specify below which datasets you would like to have bigWig
# files from, using
# datasets = Dset1:Deset2:Dest3...
# Alternatively, set 'bigwig = all' to make bigWig files from all
# the datsets defined in the [DATASETS] section.
#
# If you do not use 'bigwig = all', you must set 'bigwig = true', otherwise no
# files will be made.
#
# In 'save_dir' supply the directories where the bigwig files should be output,
# and in 'url' give the url for this directory (i.e, "as it appears to the internet").
#
# The process of making bigWig files may use a lot of memory. Watch with 'top'
# carefully if you have less than 4 GB RAM. Depending on the size of the
# genomic region under investigation much more could potentialyl be needed.
#
# Note that if bigWig files for the datsets are already found, they will not be
# overwritten. Thus if you want to remake the files because you changed
# something about the original read-files, you must delete the files.
#
bigwig = false
# bigwig = true
# datasets = HeLa-S3_Whole_Cell:HeLa-S3_Cytoplasm:HeLa-S3_Nucleus
datasets = K562_Cytoplasm:K562_Nucleus:K562_Whole_Cell
save_dir = /users/rg/jskancke/public_html/bigWigs
url = http://genome.crg.es/~jskancke/bigWigs

# K562_Cytoplasm_Minus:K562_Nucleus_Minus:K562_Whole_Cell_Minus

#############################################
# Below settings are for debugging-purposes #
#############################################

[UTR_LENGTH_TUNING]
# For debugging purposes. Prints an extra output file with some statistics.
# If polyA is True, you can train the cumulative percentage by seeing at what
# cumulative percentage the polyA reads are found. The default value is the
# result of this tuning in the ENCODE cell-compartment dataset.
# 
# An extra output file, cumul.stat, will be generated.
# In column 1: distances from the given cumulative point (e.g 99.5%) to the
# closest polyA cluster
# In column 2: cumulative points of the closest polyA cluster
# In column 3: RPKM values of this utr
# In column 4: length of this utr
#
# From this information distributions and distances can be generated for tuning
# the 99.5% value.
# tuning = true
tuning = false

[PLOTTING]
###############################################################
# This setting can be ignored. It is for developmental purposes.
# #############################################################
#
# List the datasets from which you wish plots to be generated
# These datasets must at a previous point have been analyzed and lie in output

# datasets = old + the new ones!

first_datasets = GM12878_Cytoplasm:GM12878_CytoplasmReplicate:GM12878_Whole_Cell:GM12878_Whole_CellReplicate:GM12878_Nucleus:GM12878_NucleusReplicate:K562_Cytoplasm:K562_CytoplasmReplicate:K562_Whole_Cell:K562_Whole_CellReplicate:K562_Nucleus:K562_NucleusReplicate:HeLa-S3_Cytoplasm:HeLa-S3_CytoplasmReplicate:HeLa-S3_Whole_Cell:HeLa-S3_Whole_CellReplicate:HeLa-S3_Nucleus:HeLa-S3_NucleusReplicate:K562_CytoplasmMinus:K562_CytoplasmMinusReplicate:K562_Whole_CellMinus:K562_Whole_CellMinusReplicate:K562_NucleusMinus:K562_NucleusMinusReplicate:HeLa-S3_CytoplasmMinus:HeLa-S3_CytoplasmMinusReplicate:HeLa-S3_Whole_CellMinus:HeLa-S3_Whole_CellMinusReplicate:HeLa-S3_NucleusMinus:HeLa-S3_NucleusMinusReplicate:GM12878_CytoplasmMinus:GM12878_CytoplasmMinusReplicate:GM12878_Whole_CellMinus:GM12878_Whole_CellMinusReplicate:GM12878_NucleusMinus:GM12878_NucleusMinusReplicate:HUVEC_Cytoplasm:HUVEC_CytoplasmReplicate:HUVEC_Whole_Cell:HUVEC_Whole_CellReplicate:HUVEC_Nucleus:HUVEC_NucleusReplicate:HUVEC_CytoplasmMinus:HUVEC_CytoplasmMinusReplicate:HUVEC_Whole_CellMinus:HUVEC_Whole_CellMinusReplicate:HUVEC_NucleusMinus:HUVEC_NucleusMinusReplicate:HEPG2_Cytoplasm:HEPG2_CytoplasmReplicate:HEPG2_Whole_Cell:HEPG2_Whole_CellReplicate:HEPG2_Nucleus:HEPG2_NucleusReplicate:HEPG2_CytoplasmMinus:HEPG2_CytoplasmMinusReplicate:HEPG2_Whole_CellMinus:HEPG2_Whole_CellMinusReplicate:HEPG2_NucleusMinus:HEPG2_NucleusMinusReplicate

same_nr = H1HESC_Whole_Cell:H1HESC_Cytoplasm:H1HESC_Nucleus:H1HESC_Whole_CellMinus:H1HESC_CytoplasmMinus:H1HESC_NucleusMinus

not_equal = H1HESC_Whole_CellReplicate:H1HESC_Whole_CellMinusReplicate:NHEK_Whole_Cell:NHEK_Whole_CellReplicate:NHEK_Nucleus:MCF7_Whole_Cell:MCF7_Whole_CellReplicate:AG04450_Whole_Cell:AG04450_Whole_CellReplicate:A549_Whole_Cell:A549_Whole_CellReplicate:HSMM_Whole_Cell:HSMM_Whole_CellReplicate:NHLF_Whole_Cell:NHLF_Whole_CellReplicate:NHEK_Whole_CellMinus:NHEK_Whole_CellMinusReplicate:NHEK_NucleusMinus:MCF7_Whole_CellMinus:MCF7_Whole_CellMinusReplicate:AG04450_Whole_CellMinus:AG04450_Whole_CellMinusReplicate:A549_Whole_CellMinus:A549_Whole_CellMinusReplicate:HSMM_Whole_CellMinus:HSMM_Whole_CellMinusReplicate:NHLF_Whole_CellMinus:NHLF_Whole_CellMinusReplicate

# Depending on the plot, combine datasets with everythign or 
# datasets = %(first_datasets)s:%(same_nr)s
datasets = %(first_datasets)s:%(same_nr)s:%(not_equal)s
